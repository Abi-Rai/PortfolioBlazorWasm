@page "/tictactoe"
<PageTitle>TicTacToe</PageTitle>
@using PortfolioBlazorWasm.Models.TicTacToe.Settings;
@using PortfolioBlazorWasm.Components.TicTacToe;
@using PortfolioBlazorWasm.Services.TicTacToeService;

@inject ISnackbar SnackBarService;
@inject IDialogService DialogService;

<MudPaper Class="pa-4" Style="position: relative;z-index: 0;">
    <MudText Typo="Typo.h3" Align="Align.Center">Tic-Tac-Toe</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-2 py-4" />
    @if (_gameBoard is not null)
    {
        <MudPaper Width="350px" Height="141px" Style="margin:auto;position: relative;z-index: -20;">
            <MudText Align="Align.Center" Typo="Typo.h5">
                <MudText Typo="Typo.h4" Style=@($"color:{_gameBoard.GetCurrentPlayer().CellColorValue}")>
                    (@_gameBoard.GetCurrentPlayer().Marker)
                </MudText>
                @{
                    if (_gameBoard.IsDraw)
                    {
                        <MudText Style="color:#ff0707;" Align="Align.Center" Typo="Typo.h5">
                            <b> Game is a<br /> Draw! </b>
                            <br />
                            <MudIcon Icon="fas fa-skull-crossbones fa-lg" />
                        </MudText>
                    }
                    else if (_gameBoard.IsWon)
                    {
                        <MudText Style=@($"color:{_gameBoard.GetCurrentPlayer().CellColorValue};") Align="Align.Center" Typo="Typo.h5">
                            <b>@_gameBoard.GetCurrentPlayer().Name <br> Won!</b>
                            <br />
                            <MudIcon Icon="fas fa-glass-cheers fa-lg" />
                        </MudText>
                    }
                    else
                    {
                        <MudText Align="Align.Center" Typo="Typo.h5">
                        @_gameBoard.GetCurrentPlayer().Name<br /> Turn!
                        <br/>
                        </MudText>
                    }
                }
            </MudText>
        </MudPaper>
        @if (_gameBoard.IsWon)
        {
            <FireworksAnimation />
        }
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <MudGrid Spacing="0" Justify="Justify.Center">
            @for (int i = 0; i < _gameBoard.RowLength; i++)
            {
                int x = i;
                <MudItem Style="padding:0.9px">
                    @for (int j = 0; j < _gameBoard.RowLength; j++)
                    {
                        int y = j;
                        int cellIndex = _gameBoard.PointSelector[(x, y)];
                        <MudPaper Height="60px" Width="60px"
                      Square="true" Outlined="false" Elevation="4"
                      Class=@($"normal-cell d-flex align-center justify-center {GetCursorStyle(cellIndex)}")
                      Style=@($"overflow:clip;{GetCellStyle(cellIndex)}")
                      @onclick="@(()=>ValidateAndMakeMove(cellIndex))">
                            <MudText Align="Align.Center" Class="cell-marker-text">
                                @_gameBoard.GetCell(cellIndex).ValueStr
                            </MudText>
                        </MudPaper>
                    }
                </MudItem>
            }
        </MudGrid>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <MudPaper Class="pa-2">
            <MudGrid Spacing="2" Justify="Justify.Center">
                <MudItem sm="12" xs="12" Style="left:20px;display: flex;align-items: center;justify-content: center;">
                    <MudIcon Icon="fas fa-tools fa-lg" Color="Color.Surface" Size="Size.Large" Style="border:1px solid var(--mud-palette-text-primary);height:30px;width:30px;align-items:center;display: flex;border-radius:50px;justify-content:center;box-shadow: 0px 0px 3px 1px black;" />
                </MudItem>
                <MudItem xs="12" sm="6" Style="display: flex;align-items: center;justify-content: center; width:240px;">
                    <MudButton Variant="Variant.Outlined" StartIcon="fas fa-undo-alt fa-xs" Color="Color.Info" OnClick="()=>ResetGame()" ButtonType="ButtonType.Reset" Size="Size.Small" Style="width:187px;height:32px;left:-5px;">Restart Game</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" Style="display: flex;align-items: center;justify-content: center;">
                    <MudSwitch @bind-Checked="@_showHistory" Color="Color.Tertiary" LabelPosition="LabelPosition.Start" Size="Size.Small" Style="width:240px;">
                        <MudChip Label="true" Color="@(_showHistory?Color.Tertiary:Color.Surface)" Style="cursor:pointer;width:187px;" Variant="Variant.Outlined" Icon="fas fa-history fa-lg">Display move history</MudChip>
                    </MudSwitch>
                </MudItem>
                <MudItem xs="12" sm="6" Style="display: flex;align-items: center;justify-content: center;">
                    <MudButton Variant="Variant.Outlined" StartIcon="fas fa-user-cog fa-xs" Color="Color.Info" OnClick="@(() => ShowSettings())" ButtonType="ButtonType.Reset" FullWidth="false" Size="Size.Small" Disabled="!_gameNotStarted" Style="width:187px;height:32px;left:-5px;">Change Settings</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" Style="display: flex;align-items: center;justify-content: center;">
                    <MudSwitch @bind-Checked="@_playWithComputer" Color="Color.Tertiary" LabelPosition="LabelPosition.Start" Size="Size.Small" Disabled="(!_gameNotStarted || _gameBoard.PlayerTwoStarting)" Style="width:240px;">
                        <MudChip Label="true" Color="@(_playWithComputer?Color.Tertiary:Color.Surface)" Style="cursor:pointer;width:187px;" Variant="Variant.Outlined" Icon="fas fa-robot fa-lg" Disabled="(!_gameNotStarted || _gameBoard.PlayerTwoStarting)" >Play against computer </MudChip>
                    </MudSwitch>
                </MudItem>

            </MudGrid>
        </MudPaper>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        @if (_showHistory)
        {
            <MudTimeline Class="timeline-load">
                @for (int i = 0; i < _gameBoard.MoveHistory.Count; i++)
                {
                    var turn = i; // needs to be redeclared because of C# Feature Closure Capture
                    var move = _gameBoard.MoveHistory[turn];
                    <MudTimelineItem Color="GetTimeLineColor(turn)" Size="Size.Small" Variant="Variant.Outlined">
                        <ItemOpposite>
                            <MudText Typo="Typo.h6" Style=@($"color:{_gameBoard.GetCellColorValue(move.CellIndex)}") Color="@GetTimeLineTextColor(move.CellIndex)">@move.PlayerMarker</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudText Color="@GetTimeLineTextColor(move.CellIndex)" Typo="Typo.body2">@move.MoveLog</MudText>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        }
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
</MudPaper>

