@page "/asciiconverter"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using System.Text;
@using SixLabors.ImageSharp.Processing.Processors.Quantization;

<InputFile OnChange="@LoadFiles" />
@if(@imgSrc is not null)
{
    <div>
        <MudNumericField Label="Width" @bind-Value="@_width" Step="10" Min="40" Max="100"/>
        <MudButton @onclick="async()=> await RegenerateImage()" Class="mud-theme-primary" Variant="Variant.Filled">Generate Ascii Image</MudButton>
    </div>
    <MudPaper Elevation="2">
        <div style="display:flex;flex-wrap:wrap;justify-items:center;">
            <img style="width: @(_width * 10)px;border:1px solid green;" src="@imgSrc" />
            @if (asciiArt != null)
            {
                <pre style="font-family:'Roboto Mono';">@asciiArt</pre>
            }
        </div>
    </MudPaper>
}
else
{
    <h6>loading image...</h6>
}

@code {
    private string asciiArt;
    private string imgSrc;
    private string[] _AsciiChars = { " ", ".", "-", ":", "*", "+", "=", "%", "@", "#", "#" };
    private int _width = 60;
    private int _imgWidth;

    private IBrowserFile _file;

    private async Task OnInitializedAsnyc()
    {
        await base.OnInitializedAsync();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        _file = e.File;
        //using var imageStream = imageFile.OpenReadStream();
        //using var image = await Image.LoadAsync<Rgba32>(imageStream);
        //var resizedImage = await GetReSizedImageAsync(image, _width);
        //asciiArt = await ConvertToAsciiAsync(resizedImage);
        //// Convert image stream to base64 string
        var format = imageFile.ContentType.Split('/')[1];
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);
        var base64String = Convert.ToBase64String(buffer);

        // Set the src of the img element
        imgSrc = $"data:image/{format};base64,{base64String}";
    }
    private async Task RegenerateImage()
    {
        using var imageStream = _file.OpenReadStream();
        using var image = await Image.LoadAsync<Rgba32>(imageStream);
        var resizedImage = await GetReSizedImageAsync(image, _width);
        asciiArt = await ConvertToAsciiAsync(resizedImage);
    }
    private async Task<Image<Rgba32>> GetReSizedImageAsync(Image<Rgba32> inputBitmap, int asciiWidth)
    {
        int asciiHeight = 0;
        //Calculate the new Height of the image from its width
        asciiHeight = (int)Math.Ceiling((double)inputBitmap.Height * asciiWidth / inputBitmap.Width);

        // using NearestNeighbor resampler
        await Task.Run(() => inputBitmap.Mutate(x => x.Resize(new ResizeOptions
            {
                Size = new SixLabors.ImageSharp.Size(asciiWidth, asciiHeight),
                Sampler = KnownResamplers.NearestNeighbor
            })));
        return inputBitmap;
    }

    private async Task<string> ConvertToAsciiAsync(Image<Rgba32> image)
    {
        // Number of colors to quantize the image to
        int colorCount = _AsciiChars.Length;

        // Quantize the image
        var quantizer = new WuQuantizer();
        using var quantizedImage = image.Clone(ctx => ctx.Quantize(quantizer));

        // Generate ASCII art
        Boolean toggle = true;
        StringBuilder sb = new StringBuilder();
        for (int h = 0; h < quantizedImage.Height; h++)
        {
            for (int w = 0; w < quantizedImage.Width; w++)
            {
                var pixelColor = quantizedImage[w, h];
                int red = (pixelColor.R + pixelColor.G + pixelColor.B) / 3;
                int green = (pixelColor.R + pixelColor.G + pixelColor.B) / 3;
                int blue = (pixelColor.R + pixelColor.G + pixelColor.B) / 3;
                Rgba32 grayColor = new Rgba32((byte)red, (byte)green, (byte)blue);
                if (!toggle)
                {
                    int index = (grayColor.R * (_AsciiChars.Length - 1)) / 255;
                    sb.Append(_AsciiChars[index]);
                }
            }
            if (!toggle)
            {
                sb.AppendLine();
                toggle = true;
            }
            else
            {
                toggle = false;
            }
            await Task.Delay(1);
            asciiArt = sb.ToString();
            await InvokeAsync(StateHasChanged);
        }
        return sb.ToString();
    }
}