@page "/pathfinding"
<PageTitle>Pathfinding</PageTitle>
@using PortfolioBlazorWasm.Components.Pathfinding;
@using PortfolioBlazorWasm.Models.Pathfinding;
@using PortfolioBlazorWasm.Models.Pathfinding.Enums;
@using PortfolioBlazorWasm.Helpers.CustomExtensions;
@using PortfolioBlazorWasm.Services.Pathfinding;

@inject ISnackbar SnackBarService;
@inject IDialogService DialogService
@inject IPathfindingRunner PathFindingService;

<MudPaper Class="pt-4 px-4 py-2 my-4">
    <MudText Align="Align.Center" Typo="Typo.h4">Pathfinding algorithm</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-2" />
    <MudPaper Class="px-2" MaxWidth="850px">
        <MudGrid Class="my-2" Spacing="0" Justify="Justify.Center">
            <MudItem xs="10" sm="10">
                <MudGrid Spacing="0">
                    <MudItem xs="6" sm="6">
                        <MudPaper Outlined="true" Class="px-2 pb-2 mt-2" Style="border-bottom:none;border-right:none;">
                            <MudSelect Dense="true" @bind-Value="@_searchSettings.AlgorithmType" For="@(()=>_searchSettings.AlgorithmType)" Label="Algorithm type">
                                @foreach (AlgorithmTypes algorithmType in Enum.GetValues(typeof(AlgorithmTypes)))
                                {
                                    <MudSelectItem Value="@algorithmType">@algorithmType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6" sm="6">
                        <MudPaper Outlined="true" Class="px-2 pb-2 mt-2" Style="border-bottom:none;">
                            <MudSelect Dense="true" @bind-Value="@_searchSettings.SearchSpeed" For="@(()=>_searchSettings.SearchSpeed)" Label="Search Speed">
                                @foreach (SearchSpeeds searchSpeed in Enum.GetValues(typeof(SearchSpeeds)))
                                {
                                    <MudSelectItem Value="@searchSpeed">@searchSpeed</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Outlined="true" Class="px-2 pt-1 pb-2 mb-2" Style="">
                            <MudGrid Class="pa-1 " Justify="Justify.Center">
                                <MudItem xs="12" sm="6">
                                    <MudGrid Justify="Justify.Center" Spacing="0">
                                        <MudItem xs="10" sm="6" Class="d-flex justify-center align-center">
                                            <MudText Typo="Typo.h6" Color="Color.Primary">Design Mode</MudText>
                                        </MudItem>
                                        <MudItem xs="2" sm="2" Class="d-flex justify-center align-center">
                                            <MudIconButton Title="Instructions" Size="Size.Medium" Icon="@Icons.Material.Filled.HelpOutline"
                                                           OnClick="OpenInstructionsDialog" Color="Color.Info" aria-label="Instructions" />
                                        </MudItem>
                                        <MudItem xs="12" sm="8" Class="d-flex justify-center align-center">
                                            <MudSwitch Size="Size.Medium" @bind-Checked="_isPlaceWalls" Color="Color.Success"
                                                       LabelPosition="LabelPosition.End" UnCheckedColor="Color.Secondary" Disabled="@(_isAlgorithmRunning || !_isGridReset)">
                                                <MudChip Style="width:145px;cursor:pointer;" Size="Size.Medium" Label="true" Disabled="@(_isAlgorithmRunning || !_isGridReset)"
                                                         Color="@(_isPlaceWalls?Color.Success:Color.Secondary)" Variant="Variant.Text">
                                                    @(_isPlaceWalls ? "Place Walls" : "Move Start/Finish")
                                                </MudChip>
                                            </MudSwitch>
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>

                                <MudItem xs="12" sm="6" Style="border-left:1px solid var(--mud-palette-lines-default); border-radius:1px;">
                                    <EditForm Model="_gridSettings" style="display: flex;flex-direction: row;" OnValidSubmit="RegenerateNewGrid">
                                        <MudGrid Spacing="0" Justify="Justify.Center" Class="align-content-center">
                                            <MudItem xs="6" sm="6">
                                                <MudNumericField Min="GridSettings.RowMin" Max="GridSettings.RowMax" Disabled="@_isAlgorithmRunning"
                                                                 @bind-Value="_gridSettings.RowCount" For="@(()=>_gridSettings.RowCount)"
                                                                 Label="Rows" OnlyValidateIfDirty="true" Variant="Variant.Outlined"
                                                                 HelperText="@($"Min:{GridSettings.RowMin} - Max:{GridSettings.RowMax}")" HelperTextOnFocus="true" />
                                            </MudItem>
                                            <MudItem xs="6" sm="6">
                                                <MudNumericField Min="GridSettings.ColMin" Max="GridSettings.ColMax" Disabled="@_isAlgorithmRunning"
                                                                 @bind-Value="_gridSettings.ColumnCount" For="@(()=>_gridSettings.ColumnCount)"
                                                                 Label="Columns" OnlyValidateIfDirty="true" Variant="Variant.Outlined"
                                                                 HelperText="@($"Min:{GridSettings.ColMin} - Max:{GridSettings.ColMax}")" HelperTextOnFocus="true" />
                                            </MudItem>
                                            <MudItem xs="6" sm="6" Class="d-flex justify-center">
                                                <MudButton Variant="Variant.Text" ButtonType="ButtonType.Submit" Disabled="@_isAlgorithmRunning"
                                                           Size="Size.Small" Color="Color.Warning" EndIcon="fas fa-th fa-xs">Regenerate</MudButton>
                                            </MudItem>
                                            <MudItem xs="6" sm="6" Class="d-flex justify-center">
                                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Success" EndIcon="fas fa-magic fa-xs"
                                                           Disabled="@(_isAlgorithmRunning || !_isGridReset)" OnClick="GenerateMaze" Size="Size.Small">Create Walls</MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </EditForm>

                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>

                </MudGrid>
            </MudItem>
            @* TODO:  playground to adjust menus -> https://try.mudblazor.com/snippet/wEQnOtPLgwHdLPka *@
            <MudItem xs="6" sm="6" md="2" Style="display: flex;align-items: center;justify-content: center;" Class="mb-2">
                <MudButtonGroup VerticalAlign="true" OverrideStyles="false">
                    <MudButton StartIcon="@Icons.Material.Filled.StopCircle" Size="Size.Small" Variant="Variant.Filled" Style="width:124px;" Color="Color.Error" OnClick="CancelAlgorithm" Disabled="@(!_isAlgorithmRunning &&!_isGridReset)">Cancel</MudButton>
                    <MudMenu Label="Reset" Disabled="@_isAlgorithmRunning" Color="Color.Warning" Variant="Variant.Filled" Style="width:124px;" StartIcon="@Icons.Material.Filled.Repeat" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        <MudMenuItem IconColor="Color.Info" OnClick="ClearVisitedNodes" OnTouch="ClearVisitedNodes" Icon="@Icons.Material.Filled.CropSquare">Clear Visited</MudMenuItem>
                        <MudMenuItem IconColor="Color.Tertiary" OnClick="ClearWalls" OnTouch="ClearWalls" Icon="@Icons.Material.Filled.GridOff">Clear Visited & Walls</MudMenuItem>
                        <MudMenuItem IconColor="Color.Secondary" OnClick="ResetGridToDefault" OnTouch="ResetGridToDefault" Icon="@Icons.Material.Filled.Refresh">Full Reset</MudMenuItem>
                    </MudMenu>
                    <MudTooltip ShowOnHover="@(!_isGridReset)">
                        <ChildContent>
                            <MudButton StartIcon="@Icons.Material.Filled.PlayCircleOutline" Size="Size.Small" Variant="Variant.Filled" Style="width:124px;"   Color="Color.Info" OnClick="StartAlgorithm" Disabled="@(_isAlgorithmRunning || !_isGridReset)">Run</MudButton>
                        </ChildContent>
                        <TooltipContent>
                            <MudBadge Icon="@Icons.Material.Filled.ArrowUpward" Origin="Origin.TopCenter" Color="Color.Warning" Style="padding-top: 5px;">
                            <MudText Typo="Typo.body2">Reset grid to run again</MudText>
                            </MudBadge>
                        </TooltipContent>
                    </MudTooltip>
                </MudButtonGroup>
            </MudItem>
        </MudGrid>

    </MudPaper>
</MudPaper>

@if (PathFindingService.Grid is not null)
{
    <div class="grid-container">
        <div class="grid-table" style="grid-template-rows: repeat(@PathFindingService.Grid.GetLength(0), 25px);">
            @for (int i = 0; i < PathFindingService.Grid.GetLength(0); i++)
            {
                <div class="grid-row" style="grid-template-columns: repeat(@PathFindingService.Grid.GetLength(1), 25px);">
                    @for (int j = 0; j < PathFindingService.Grid.GetLength(1); j++)
                    {
                        int x = i, y = j;
                        var node = PathFindingService.Grid[x, y];
                        @if (!_isAlgorithmRunning && _isPlaceWalls && _isGridReset)
                        {
                            <div draggable="true"
                                dropzone="move"
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                @onclick="(()=>HandleClickedCell(node))"
                @ondragenter="(()=> HandleWallPlace(node))"
                                 class="grid-col @(_isDragging ? GetDropClass(node.State) : "") @GetClassVisited(node.Visited) @GetClass(node.State) @GetDragClass(node.State)">
                            </div>
                        }
                        else if (!_isAlgorithmRunning && !_isPlaceWalls && _isGridReset)
                        {
                            <div @ondragstart="(()=>HandleDragStart(node))"
                @ondrop="(()=>HandleDrop(node))"
                                ondragover="event.preventDefault();"
                                ondrag="event.preventDefault()"
                                ondragenter="if ('@IsDroppableZone(node.State)') { event.target.classList.add('can-drop'); }"
                                ondragleave="event.target.classList.remove('can-drop');"
                                ondragend="document.elementFromPoint(event.clientX, event.clientY).classList.remove('can-drop');"
                                draggable="@GetDraggable(node.State)"
                                 class="grid-col @(_isDragging ? GetDropClass(node.State) : "") @GetClass(node.State) @GetDragClass(node.State)">
                            </div>
                        }
                        else if (_isAlgorithmRunning && !_isGridReset)
                        {
                            <div class="grid-col @GetClassVisited(node.Visited)  @GetClassVisited(node.Visited) @GetClass(node.State)">
                            </div>
                        }
                        else
                        {
                            <div class="grid-col @GetClassVisited(node.Visited) @GetClassVisited(node.Visited) @GetClass(node.State)">
                            </div>
                        }
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <p>loading...</p>
}