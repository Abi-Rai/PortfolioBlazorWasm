@using FluentValidation;
@using MudBlazor.Utilities;
@using PortfolioBlazorWasm.Models.TicTacToe.Enums;
@using PortfolioBlazorWasm.Models.TicTacToe.Settings;

@inject ISnackbar SnackBarService;
@inject IValidator<ChangeSettings> SettingsValidator


<MudDialog DisableSidePadding="false">
    <DialogContent>
        <MudForm Model="@GameSettings" @ref="@form" Validation="@(ValidateValue)" ValidationDelay="0" Class="overflow-hidden">
            <MudGrid Spacing="10" Justify="Justify.SpaceEvenly">
                <MudItem xs="5">
                    <MudText Typo="Typo.h6">Player 1 Settings</MudText>
                    <MudTextField @bind-Value="GameSettings.PlayerOneSettings.Name"
                                  For="@(() => GameSettings.PlayerOneSettings.Name)"
                                  Immediate="true"
                                  Label="Name" />

                    <MudTextField @bind-Value="GameSettings.PlayerOneSettings.Marker"
                                  For="@(() => GameSettings.PlayerOneSettings.Marker)"
                                  Immediate="true"
                                  Label="Marker" OnlyValidateIfDirty="true" />

                    <MudColorPicker @bind-Value="GameSettings.PlayerOneSettings.ColorCell"
                                    For="@(() => GameSettings.PlayerOneSettings.ColorCell)"
                                    ColorPickerView="ColorPickerView.Palette"
                                    DisableColorField="true"
                                    Palette="SelectableColors"
                                    TransformOrigin="Origin.TopLeft" 
                                    
                                    Label="Color" />
                </MudItem>
                <MudItem xs="5">
                    <MudText Typo="Typo.h6">Player 2 Settings</MudText>
                    <MudTextField @bind-Value="GameSettings.PlayerTwoSettings.Name"
                                  For="@(() => GameSettings.PlayerTwoSettings.Name)"
                                  Immediate="true"
                                  Label="Name" />

                    <MudTextField @bind-Value="GameSettings.PlayerTwoSettings.Marker"
                                  For="@(() => GameSettings.PlayerTwoSettings.Marker)"
                                  Immediate="true"
                                  Label="Marker" />

                    <MudColorPicker @bind-Value="GameSettings.PlayerTwoSettings.ColorCell"
                                    For="@(() => GameSettings.PlayerTwoSettings.ColorCell)"
                                    ColorPickerView="ColorPickerView.Palette"
                                    DisableColorField="true"
                                    Palette="SelectableColors"
                                    TransformOrigin="Origin.TopLeft" 
                                    Label="Color" />
                </MudItem>
                <MudItem xs="9">
                    <MudSelect @bind-Value="GameSettings.BoardSettings.RowSizes"
                               For="@(() => GameSettings.BoardSettings.RowSizes)"
                               Label="Board Size">
                        @foreach (RowSizes rowSize in Enum.GetValues(typeof(RowSizes)))
                        {
                            <MudSelectItem Value="@rowSize">@rowSize</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect @bind-Value="GameSettings.BoardSettings.StartingPlayer"
                               For="@(() => GameSettings.BoardSettings.StartingPlayer)"
                               HelperText="Second Player will always be computer"
                               Label="Starting Player">
                        <MudSelectItem Value="@PlayerNumber.One">@PlayerNumber.One</MudSelectItem>
                        <MudSelectItem Value="@PlayerNumber.Two">@PlayerNumber.Two</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="CloseDialog">Save Settings</MudButton>
    </DialogActions>

</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ChangeSettings GameSettings { get; set; }

    private MudForm? form { get; set; }

    public IEnumerable<MudColor> SelectableColors { get; set; } = new MudColor[]
     {
        "#bb53d5", "#6cd5a5", "#ffd254", "#5d87e7", "#e3ae60",
        "#e36060", "#7d7cf1", "#f17ced", "#9ea9a4", "#e93737"
     };

    private void Cancel()=>MudDialog.Cancel();

    private async void CloseDialog()
    {
        await form!.Validate();
        if (form.IsValid)
        {
            MudDialog.Close<ChangeSettings>(GameSettings);
        }
        else
        {
            SnackBarService.Add("Validation failed",MudBlazor.Severity.Error);
        }
    }

    public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
    {
        var result = await SettingsValidator.ValidateAsync(ValidationContext<ChangeSettings>.CreateWithOptions((ChangeSettings)model, x => x.IncludeProperties(propertyName)));
        if (result.IsValid)
            return Array.Empty<string>();
        return result.Errors.Select(e => e.ErrorMessage);
    };
}
